package fakekube.io.api;

import fakekube.io.model.IoK8sApiAuthenticationV1TokenRequest;
import fakekube.io.model.IoK8sApiAutoscalingV1Scale;
import fakekube.io.model.IoK8sApiCoreV1Binding;
import fakekube.io.model.IoK8sApiCoreV1ComponentStatus;
import fakekube.io.model.IoK8sApiCoreV1ComponentStatusList;
import fakekube.io.model.IoK8sApiCoreV1ConfigMap;
import fakekube.io.model.IoK8sApiCoreV1ConfigMapList;
import fakekube.io.model.IoK8sApiCoreV1Endpoints;
import fakekube.io.model.IoK8sApiCoreV1EndpointsList;
import fakekube.io.model.IoK8sApiCoreV1Event;
import fakekube.io.model.IoK8sApiCoreV1EventList;
import fakekube.io.model.IoK8sApiCoreV1LimitRange;
import fakekube.io.model.IoK8sApiCoreV1LimitRangeList;
import fakekube.io.model.IoK8sApiCoreV1Namespace;
import fakekube.io.model.IoK8sApiCoreV1NamespaceList;
import fakekube.io.model.IoK8sApiCoreV1Node;
import fakekube.io.model.IoK8sApiCoreV1NodeList;
import fakekube.io.model.IoK8sApiCoreV1PersistentVolume;
import fakekube.io.model.IoK8sApiCoreV1PersistentVolumeClaim;
import fakekube.io.model.IoK8sApiCoreV1PersistentVolumeClaimList;
import fakekube.io.model.IoK8sApiCoreV1PersistentVolumeList;
import fakekube.io.model.IoK8sApiCoreV1Pod;
import fakekube.io.model.IoK8sApiCoreV1PodList;
import fakekube.io.model.IoK8sApiCoreV1PodTemplate;
import fakekube.io.model.IoK8sApiCoreV1PodTemplateList;
import fakekube.io.model.IoK8sApiCoreV1ReplicationController;
import fakekube.io.model.IoK8sApiCoreV1ReplicationControllerList;
import fakekube.io.model.IoK8sApiCoreV1ResourceQuota;
import fakekube.io.model.IoK8sApiCoreV1ResourceQuotaList;
import fakekube.io.model.IoK8sApiCoreV1Secret;
import fakekube.io.model.IoK8sApiCoreV1SecretList;
import fakekube.io.model.IoK8sApiCoreV1Service;
import fakekube.io.model.IoK8sApiCoreV1ServiceAccount;
import fakekube.io.model.IoK8sApiCoreV1ServiceAccountList;
import fakekube.io.model.IoK8sApiCoreV1ServiceList;
import fakekube.io.model.IoK8sApiPolicyV1beta1Eviction;
import fakekube.io.model.IoK8sApimachineryPkgApisMetaV1APIResourceList;
import fakekube.io.model.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import fakekube.io.model.IoK8sApimachineryPkgApisMetaV1Patch;
import fakekube.io.model.IoK8sApimachineryPkgApisMetaV1Status;
import fakekube.io.model.IoK8sApimachineryPkgApisMetaV1WatchEvent;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;
import org.apache.cxf.jaxrs.ext.multipart.*;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.ApiResponse;
import io.swagger.jaxrs.PATCH;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Kubernetes
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
@Path("/")
@Api(value = "/", description = "")
public interface CoreV1Api  {

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1DeleteNamespacedPodProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1DeleteNamespacedPodProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1DeleteNamespacedServiceProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1DeleteNamespacedServiceProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @DELETE
    @Path("/api/v1/nodes/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1DeleteNodeProxy(@PathParam("name") String name, @QueryParam("path") String path);

    @DELETE
    @Path("/api/v1/nodes/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1DeleteNodeProxyWithPath(@PathParam("name") String name, @PathParam("path") String path, @QueryParam("path") String path2);

    @GET
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/attach")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1GetNamespacedPodAttach(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("container") String container, @QueryParam("stderr") Boolean stderr, @QueryParam("stdin") Boolean stdin, @QueryParam("stdout") Boolean stdout, @QueryParam("tty") Boolean tty);

    @GET
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/exec")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1GetNamespacedPodExec(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("command") String command, @QueryParam("container") String container, @QueryParam("stderr") Boolean stderr, @QueryParam("stdin") Boolean stdin, @QueryParam("stdout") Boolean stdout, @QueryParam("tty") Boolean tty);

    @GET
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/portforward")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1GetNamespacedPodPortforward(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("ports") Integer ports);

    @GET
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1GetNamespacedPodProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @GET
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1GetNamespacedPodProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @GET
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1GetNamespacedServiceProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @GET
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1GetNamespacedServiceProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @GET
    @Path("/api/v1/nodes/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1GetNodeProxy(@PathParam("name") String name, @QueryParam("path") String path);

    @GET
    @Path("/api/v1/nodes/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1GetNodeProxyWithPath(@PathParam("name") String name, @PathParam("path") String path, @QueryParam("path") String path2);

    @HEAD
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1HeadNamespacedPodProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @HEAD
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1HeadNamespacedPodProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @HEAD
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1HeadNamespacedServiceProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @HEAD
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1HeadNamespacedServiceProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @HEAD
    @Path("/api/v1/nodes/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1HeadNodeProxy(@PathParam("name") String name, @QueryParam("path") String path);

    @HEAD
    @Path("/api/v1/nodes/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1HeadNodeProxyWithPath(@PathParam("name") String name, @PathParam("path") String path, @QueryParam("path") String path2);

    @OPTIONS
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1OptionsNamespacedPodProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @OPTIONS
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1OptionsNamespacedPodProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @OPTIONS
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1OptionsNamespacedServiceProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @OPTIONS
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1OptionsNamespacedServiceProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @OPTIONS
    @Path("/api/v1/nodes/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1OptionsNodeProxy(@PathParam("name") String name, @QueryParam("path") String path);

    @OPTIONS
    @Path("/api/v1/nodes/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1OptionsNodeProxyWithPath(@PathParam("name") String name, @PathParam("path") String path, @QueryParam("path") String path2);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PatchNamespacedPodProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PatchNamespacedPodProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PatchNamespacedServiceProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PatchNamespacedServiceProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @PATCH
    @Path("/api/v1/nodes/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PatchNodeProxy(@PathParam("name") String name, @QueryParam("path") String path);

    @PATCH
    @Path("/api/v1/nodes/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PatchNodeProxyWithPath(@PathParam("name") String name, @PathParam("path") String path, @QueryParam("path") String path2);

    @POST
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/attach")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PostNamespacedPodAttach(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("container") String container, @QueryParam("stderr") Boolean stderr, @QueryParam("stdin") Boolean stdin, @QueryParam("stdout") Boolean stdout, @QueryParam("tty") Boolean tty);

    @POST
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/exec")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PostNamespacedPodExec(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("command") String command, @QueryParam("container") String container, @QueryParam("stderr") Boolean stderr, @QueryParam("stdin") Boolean stdin, @QueryParam("stdout") Boolean stdout, @QueryParam("tty") Boolean tty);

    @POST
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/portforward")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PostNamespacedPodPortforward(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("ports") Integer ports);

    @POST
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PostNamespacedPodProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @POST
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PostNamespacedPodProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @POST
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PostNamespacedServiceProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @POST
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PostNamespacedServiceProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @POST
    @Path("/api/v1/nodes/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PostNodeProxy(@PathParam("name") String name, @QueryParam("path") String path);

    @POST
    @Path("/api/v1/nodes/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PostNodeProxyWithPath(@PathParam("name") String name, @PathParam("path") String path, @QueryParam("path") String path2);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PutNamespacedPodProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PutNamespacedPodProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PutNamespacedServiceProxy(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("path") String path);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PutNamespacedServiceProxyWithPath(@PathParam("name") String name, @PathParam("namespace") String namespace, @PathParam("path") String path, @QueryParam("path") String path2);

    @PUT
    @Path("/api/v1/nodes/{name}/proxy")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PutNodeProxy(@PathParam("name") String name, @QueryParam("path") String path);

    @PUT
    @Path("/api/v1/nodes/{name}/proxy/{path}")
    @Consumes({ "*/*" })
    @Produces({ "*/*" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response connectCoreV1PutNodeProxyWithPath(@PathParam("name") String name, @PathParam("path") String path, @QueryParam("path") String path2);

    @POST
    @Path("/api/v1/namespaces")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Namespace.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Namespace.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1Namespace.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1Namespace(@Valid IoK8sApiCoreV1Namespace body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/namespaces/{namespace}/bindings")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Binding.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Binding.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1Binding.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedBinding(@PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Binding body, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("pretty") String pretty);

    @POST
    @Path("/api/v1/namespaces/{namespace}/configmaps")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ConfigMap.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1ConfigMap.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1ConfigMap.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedConfigMap(@PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1ConfigMap body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/namespaces/{namespace}/endpoints")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Endpoints.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Endpoints.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1Endpoints.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedEndpoints(@PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Endpoints body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/namespaces/{namespace}/events")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Event.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Event.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1Event.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedEvent(@PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Event body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/namespaces/{namespace}/limitranges")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1LimitRange.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1LimitRange.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1LimitRange.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedLimitRange(@PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1LimitRange body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/namespaces/{namespace}/persistentvolumeclaims")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolumeClaim.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1PersistentVolumeClaim.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1PersistentVolumeClaim.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedPersistentVolumeClaim(@PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1PersistentVolumeClaim body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/namespaces/{namespace}/pods")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Pod.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Pod.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1Pod.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedPod(@PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Pod body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/binding")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Binding.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Binding.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1Binding.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedPodBinding(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Binding body, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("pretty") String pretty);

    @POST
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/eviction")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiPolicyV1beta1Eviction.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiPolicyV1beta1Eviction.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiPolicyV1beta1Eviction.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedPodEviction(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiPolicyV1beta1Eviction body, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("pretty") String pretty);

    @POST
    @Path("/api/v1/namespaces/{namespace}/podtemplates")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PodTemplate.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1PodTemplate.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1PodTemplate.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedPodTemplate(@PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1PodTemplate body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/namespaces/{namespace}/replicationcontrollers")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ReplicationController.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1ReplicationController.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1ReplicationController.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedReplicationController(@PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1ReplicationController body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/namespaces/{namespace}/resourcequotas")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ResourceQuota.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1ResourceQuota.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1ResourceQuota.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedResourceQuota(@PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1ResourceQuota body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/namespaces/{namespace}/secrets")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Secret.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Secret.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1Secret.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedSecret(@PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Secret body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/namespaces/{namespace}/services")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Service.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Service.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1Service.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedService(@PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Service body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/namespaces/{namespace}/serviceaccounts")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ServiceAccount.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1ServiceAccount.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1ServiceAccount.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedServiceAccount(@PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1ServiceAccount body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiAuthenticationV1TokenRequest.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiAuthenticationV1TokenRequest.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiAuthenticationV1TokenRequest.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1NamespacedServiceAccountToken(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiAuthenticationV1TokenRequest body, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("pretty") String pretty);

    @POST
    @Path("/api/v1/nodes")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Node.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Node.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1Node.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1Node(@Valid IoK8sApiCoreV1Node body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/api/v1/persistentvolumes")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolume.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1PersistentVolume.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiCoreV1PersistentVolume.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createCoreV1PersistentVolume(@Valid IoK8sApiCoreV1PersistentVolume body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/configmaps")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1CollectionNamespacedConfigMap(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/endpoints")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1CollectionNamespacedEndpoints(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/events")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1CollectionNamespacedEvent(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/limitranges")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1CollectionNamespacedLimitRange(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/persistentvolumeclaims")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1CollectionNamespacedPersistentVolumeClaim(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/pods")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1CollectionNamespacedPod(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/podtemplates")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1CollectionNamespacedPodTemplate(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/replicationcontrollers")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1CollectionNamespacedReplicationController(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/resourcequotas")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1CollectionNamespacedResourceQuota(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/secrets")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1CollectionNamespacedSecret(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/serviceaccounts")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1CollectionNamespacedServiceAccount(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/api/v1/nodes")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1CollectionNode(@QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/api/v1/persistentvolumes")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1CollectionPersistentVolume(@QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/api/v1/namespaces/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1Namespace(@PathParam("name") String name, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/configmaps/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1NamespacedConfigMap(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/endpoints/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1NamespacedEndpoints(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/events/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1NamespacedEvent(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/limitranges/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1NamespacedLimitRange(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1NamespacedPersistentVolumeClaim(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/pods/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1NamespacedPod(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/podtemplates/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1NamespacedPodTemplate(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1NamespacedReplicationController(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/resourcequotas/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1NamespacedResourceQuota(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/secrets/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1NamespacedSecret(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/services/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1NamespacedService(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/namespaces/{namespace}/serviceaccounts/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1NamespacedServiceAccount(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/nodes/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1Node(@PathParam("name") String name, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/api/v1/persistentvolumes/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteCoreV1PersistentVolume(@PathParam("name") String name, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @GET
    @Path("/api/v1/")
    @Consumes({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1APIResourceList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response getCoreV1APIResources();

    @GET
    @Path("/api/v1/componentstatuses")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ComponentStatusList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1ComponentStatus(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/configmaps")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ConfigMapList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1ConfigMapForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/endpoints")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1EndpointsList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1EndpointsForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/events")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1EventList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1EventForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/limitranges")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1LimitRangeList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1LimitRangeForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/namespaces")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1NamespaceList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1Namespace(@QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/namespaces/{namespace}/configmaps")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ConfigMapList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1NamespacedConfigMap(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/namespaces/{namespace}/endpoints")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1EndpointsList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1NamespacedEndpoints(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/namespaces/{namespace}/events")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1EventList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1NamespacedEvent(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/namespaces/{namespace}/limitranges")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1LimitRangeList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1NamespacedLimitRange(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/namespaces/{namespace}/persistentvolumeclaims")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolumeClaimList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1NamespacedPersistentVolumeClaim(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/namespaces/{namespace}/pods")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PodList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1NamespacedPod(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/namespaces/{namespace}/podtemplates")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PodTemplateList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1NamespacedPodTemplate(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/namespaces/{namespace}/replicationcontrollers")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ReplicationControllerList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1NamespacedReplicationController(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/namespaces/{namespace}/resourcequotas")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ResourceQuotaList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1NamespacedResourceQuota(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/namespaces/{namespace}/secrets")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1SecretList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1NamespacedSecret(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/namespaces/{namespace}/services")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ServiceList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1NamespacedService(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/namespaces/{namespace}/serviceaccounts")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ServiceAccountList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1NamespacedServiceAccount(@PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/nodes")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1NodeList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1Node(@QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/persistentvolumes")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolumeList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1PersistentVolume(@QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/persistentvolumeclaims")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolumeClaimList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1PersistentVolumeClaimForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/pods")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PodList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1PodForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/podtemplates")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PodTemplateList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1PodTemplateForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/replicationcontrollers")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ReplicationControllerList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1ReplicationControllerForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/resourcequotas")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ResourceQuotaList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1ResourceQuotaForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/secrets")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1SecretList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1SecretForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/serviceaccounts")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ServiceAccountList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1ServiceAccountForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/services")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ServiceList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listCoreV1ServiceForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @PATCH
    @Path("/api/v1/namespaces/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Namespace.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1Namespace(@PathParam("name") String name, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{name}/status")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Namespace.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespaceStatus(@PathParam("name") String name, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/configmaps/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ConfigMap.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedConfigMap(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/endpoints/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Endpoints.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedEndpoints(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/events/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Event.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedEvent(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/limitranges/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1LimitRange.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedLimitRange(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolumeClaim.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedPersistentVolumeClaim(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolumeClaim.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedPersistentVolumeClaimStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/pods/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Pod.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedPod(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/status")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Pod.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedPodStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/podtemplates/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PodTemplate.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedPodTemplate(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ReplicationController.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedReplicationController(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiAutoscalingV1Scale.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedReplicationControllerScale(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ReplicationController.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedReplicationControllerStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/resourcequotas/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ResourceQuota.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedResourceQuota(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/resourcequotas/{name}/status")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ResourceQuota.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedResourceQuotaStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/secrets/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Secret.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedSecret(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/services/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Service.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedService(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/serviceaccounts/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ServiceAccount.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedServiceAccount(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/namespaces/{namespace}/services/{name}/status")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Service.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NamespacedServiceStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/nodes/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Node.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1Node(@PathParam("name") String name, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/nodes/{name}/status")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Node.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1NodeStatus(@PathParam("name") String name, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/persistentvolumes/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolume.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1PersistentVolume(@PathParam("name") String name, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/api/v1/persistentvolumes/{name}/status")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolume.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchCoreV1PersistentVolumeStatus(@PathParam("name") String name, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @GET
    @Path("/api/v1/componentstatuses/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ComponentStatus.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1ComponentStatus(@PathParam("name") String name, @QueryParam("pretty") String pretty);

    @GET
    @Path("/api/v1/namespaces/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Namespace.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1Namespace(@PathParam("name") String name, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/namespaces/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Namespace.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespaceStatus(@PathParam("name") String name, @QueryParam("pretty") String pretty);

    @GET
    @Path("/api/v1/namespaces/{namespace}/configmaps/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ConfigMap.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedConfigMap(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/namespaces/{namespace}/endpoints/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Endpoints.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedEndpoints(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/namespaces/{namespace}/events/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Event.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedEvent(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/namespaces/{namespace}/limitranges/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1LimitRange.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedLimitRange(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolumeClaim.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedPersistentVolumeClaim(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolumeClaim.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedPersistentVolumeClaimStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty);

    @GET
    @Path("/api/v1/namespaces/{namespace}/pods/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Pod.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedPod(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/log")
    @Consumes({ "*/*" })
    @Produces({ "text/plain", "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedPodLog(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("container") String container, @QueryParam("follow") Boolean follow, @QueryParam("insecureSkipTLSVerifyBackend") Boolean insecureSkipTLSVerifyBackend, @QueryParam("limitBytes") Integer limitBytes, @QueryParam("pretty") String pretty, @QueryParam("previous") Boolean previous, @QueryParam("sinceSeconds") Integer sinceSeconds, @QueryParam("tailLines") Integer tailLines, @QueryParam("timestamps") Boolean timestamps);

    @GET
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Pod.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedPodStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty);

    @GET
    @Path("/api/v1/namespaces/{namespace}/podtemplates/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PodTemplate.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedPodTemplate(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ReplicationController.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedReplicationController(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiAutoscalingV1Scale.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedReplicationControllerScale(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty);

    @GET
    @Path("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ReplicationController.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedReplicationControllerStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty);

    @GET
    @Path("/api/v1/namespaces/{namespace}/resourcequotas/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ResourceQuota.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedResourceQuota(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/namespaces/{namespace}/resourcequotas/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ResourceQuota.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedResourceQuotaStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty);

    @GET
    @Path("/api/v1/namespaces/{namespace}/secrets/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Secret.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedSecret(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/namespaces/{namespace}/services/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Service.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedService(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/namespaces/{namespace}/serviceaccounts/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ServiceAccount.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedServiceAccount(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/namespaces/{namespace}/services/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Service.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NamespacedServiceStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("pretty") String pretty);

    @GET
    @Path("/api/v1/nodes/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Node.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1Node(@PathParam("name") String name, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/nodes/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Node.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1NodeStatus(@PathParam("name") String name, @QueryParam("pretty") String pretty);

    @GET
    @Path("/api/v1/persistentvolumes/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolume.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1PersistentVolume(@PathParam("name") String name, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/api/v1/persistentvolumes/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolume.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readCoreV1PersistentVolumeStatus(@PathParam("name") String name, @QueryParam("pretty") String pretty);

    @PUT
    @Path("/api/v1/namespaces/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Namespace.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Namespace.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1Namespace(@PathParam("name") String name, @Valid IoK8sApiCoreV1Namespace body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{name}/finalize")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Namespace.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Namespace.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespaceFinalize(@PathParam("name") String name, @Valid IoK8sApiCoreV1Namespace body, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("pretty") String pretty);

    @PUT
    @Path("/api/v1/namespaces/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Namespace.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Namespace.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespaceStatus(@PathParam("name") String name, @Valid IoK8sApiCoreV1Namespace body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/configmaps/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ConfigMap.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1ConfigMap.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedConfigMap(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1ConfigMap body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/endpoints/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Endpoints.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Endpoints.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedEndpoints(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Endpoints body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/events/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Event.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Event.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedEvent(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Event body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/limitranges/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1LimitRange.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1LimitRange.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedLimitRange(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1LimitRange body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolumeClaim.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1PersistentVolumeClaim.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedPersistentVolumeClaim(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1PersistentVolumeClaim body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolumeClaim.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1PersistentVolumeClaim.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedPersistentVolumeClaimStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1PersistentVolumeClaim body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/pods/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Pod.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Pod.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedPod(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Pod body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/pods/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Pod.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Pod.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedPodStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Pod body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/podtemplates/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PodTemplate.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1PodTemplate.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedPodTemplate(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1PodTemplate body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ReplicationController.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1ReplicationController.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedReplicationController(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1ReplicationController body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiAutoscalingV1Scale.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiAutoscalingV1Scale.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedReplicationControllerScale(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiAutoscalingV1Scale body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ReplicationController.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1ReplicationController.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedReplicationControllerStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1ReplicationController body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/resourcequotas/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ResourceQuota.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1ResourceQuota.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedResourceQuota(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1ResourceQuota body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/resourcequotas/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ResourceQuota.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1ResourceQuota.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedResourceQuotaStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1ResourceQuota body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/secrets/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Secret.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Secret.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedSecret(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Secret body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/services/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Service.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Service.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedService(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Service body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/serviceaccounts/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1ServiceAccount.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1ServiceAccount.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedServiceAccount(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1ServiceAccount body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/namespaces/{namespace}/services/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Service.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Service.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NamespacedServiceStatus(@PathParam("name") String name, @PathParam("namespace") String namespace, @Valid IoK8sApiCoreV1Service body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/nodes/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Node.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Node.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1Node(@PathParam("name") String name, @Valid IoK8sApiCoreV1Node body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/nodes/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1Node.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1Node.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1NodeStatus(@PathParam("name") String name, @Valid IoK8sApiCoreV1Node body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/persistentvolumes/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolume.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1PersistentVolume.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1PersistentVolume(@PathParam("name") String name, @Valid IoK8sApiCoreV1PersistentVolume body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/api/v1/persistentvolumes/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiCoreV1PersistentVolume.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiCoreV1PersistentVolume.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceCoreV1PersistentVolumeStatus(@PathParam("name") String name, @Valid IoK8sApiCoreV1PersistentVolume body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @GET
    @Path("/api/v1/watch/configmaps")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1ConfigMapListForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/endpoints")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1EndpointsListForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/events")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1EventListForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/limitranges")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1LimitRangeListForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1Namespace(@PathParam("name") String name, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespaceList(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/configmaps/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedConfigMap(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/configmaps")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedConfigMapList(@PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/endpoints/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedEndpoints(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/endpoints")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedEndpointsList(@PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/events/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedEvent(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/events")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedEventList(@PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/limitranges/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedLimitRange(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/limitranges")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedLimitRangeList(@PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedPersistentVolumeClaim(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedPersistentVolumeClaimList(@PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/pods/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedPod(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/pods")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedPodList(@PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/podtemplates/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedPodTemplate(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/podtemplates")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedPodTemplateList(@PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedReplicationController(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/replicationcontrollers")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedReplicationControllerList(@PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedResourceQuota(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/resourcequotas")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedResourceQuotaList(@PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/secrets/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedSecret(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/secrets")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedSecretList(@PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/services/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedService(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedServiceAccount(@PathParam("name") String name, @PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/serviceaccounts")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedServiceAccountList(@PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/namespaces/{namespace}/services")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NamespacedServiceList(@PathParam("namespace") String namespace, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/nodes/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1Node(@PathParam("name") String name, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/nodes")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1NodeList(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/persistentvolumes/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1PersistentVolume(@PathParam("name") String name, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/persistentvolumeclaims")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1PersistentVolumeClaimListForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/persistentvolumes")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1PersistentVolumeList(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/pods")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1PodListForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/podtemplates")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1PodTemplateListForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/replicationcontrollers")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1ReplicationControllerListForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/resourcequotas")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1ResourceQuotaListForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/secrets")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1SecretListForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/serviceaccounts")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1ServiceAccountListForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/api/v1/watch/services")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "core_v1" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchCoreV1ServiceListForAllNamespaces(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);
}

