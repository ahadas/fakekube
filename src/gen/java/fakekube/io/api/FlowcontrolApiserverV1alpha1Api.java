package fakekube.io.api;

import fakekube.io.model.IoK8sApiFlowcontrolV1alpha1FlowSchema;
import fakekube.io.model.IoK8sApiFlowcontrolV1alpha1FlowSchemaList;
import fakekube.io.model.IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration;
import fakekube.io.model.IoK8sApiFlowcontrolV1alpha1PriorityLevelConfigurationList;
import fakekube.io.model.IoK8sApimachineryPkgApisMetaV1APIResourceList;
import fakekube.io.model.IoK8sApimachineryPkgApisMetaV1DeleteOptions;
import fakekube.io.model.IoK8sApimachineryPkgApisMetaV1Patch;
import fakekube.io.model.IoK8sApimachineryPkgApisMetaV1Status;
import fakekube.io.model.IoK8sApimachineryPkgApisMetaV1WatchEvent;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;
import org.apache.cxf.jaxrs.ext.multipart.*;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.ApiResponse;
import io.swagger.jaxrs.PATCH;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Kubernetes
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
@Path("/")
@Api(value = "/", description = "")
public interface FlowcontrolApiserverV1alpha1Api  {

    @POST
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1FlowSchema.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiFlowcontrolV1alpha1FlowSchema.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiFlowcontrolV1alpha1FlowSchema.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createFlowcontrolApiserverV1alpha1FlowSchema(@Valid IoK8sApiFlowcontrolV1alpha1FlowSchema body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @POST
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response createFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(@Valid IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @DELETE
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteFlowcontrolApiserverV1alpha1CollectionFlowSchema(@QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfiguration(@QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("continue") String _continue, @QueryParam("dryRun") String dryRun, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @DELETE
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteFlowcontrolApiserverV1alpha1FlowSchema(@PathParam("name") String name, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @DELETE
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 202, message = "Accepted", response = IoK8sApimachineryPkgApisMetaV1Status.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response deleteFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(@PathParam("name") String name, @QueryParam("pretty") String pretty, @Valid IoK8sApimachineryPkgApisMetaV1DeleteOptions body, @QueryParam("dryRun") String dryRun, @QueryParam("gracePeriodSeconds") Integer gracePeriodSeconds, @QueryParam("orphanDependents") Boolean orphanDependents, @QueryParam("propagationPolicy") String propagationPolicy);

    @GET
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/")
    @Consumes({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1APIResourceList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response getFlowcontrolApiserverV1alpha1APIResources();

    @GET
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1FlowSchemaList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listFlowcontrolApiserverV1alpha1FlowSchema(@QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1PriorityLevelConfigurationList.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response listFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(@QueryParam("pretty") String pretty, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @PATCH
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1FlowSchema.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchFlowcontrolApiserverV1alpha1FlowSchema(@PathParam("name") String name, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1FlowSchema.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchFlowcontrolApiserverV1alpha1FlowSchemaStatus(@PathParam("name") String name, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(@PathParam("name") String name, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @PATCH
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status")
    @Consumes({ "application/json-patch+json", "application/merge-patch+json", "application/strategic-merge-patch+json", "application/apply-patch+yaml" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response patchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus(@PathParam("name") String name, @Valid IoK8sApimachineryPkgApisMetaV1Patch body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager, @QueryParam("force") Boolean force);

    @GET
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1FlowSchema.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readFlowcontrolApiserverV1alpha1FlowSchema(@PathParam("name") String name, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1FlowSchema.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readFlowcontrolApiserverV1alpha1FlowSchemaStatus(@PathParam("name") String name, @QueryParam("pretty") String pretty);

    @GET
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(@PathParam("name") String name, @QueryParam("pretty") String pretty, @QueryParam("exact") Boolean exact, @QueryParam("export") Boolean export);

    @GET
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response readFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus(@PathParam("name") String name, @QueryParam("pretty") String pretty);

    @PUT
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1FlowSchema.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiFlowcontrolV1alpha1FlowSchema.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceFlowcontrolApiserverV1alpha1FlowSchema(@PathParam("name") String name, @Valid IoK8sApiFlowcontrolV1alpha1FlowSchema body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1FlowSchema.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiFlowcontrolV1alpha1FlowSchema.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceFlowcontrolApiserverV1alpha1FlowSchemaStatus(@PathParam("name") String name, @Valid IoK8sApiFlowcontrolV1alpha1FlowSchema body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(@PathParam("name") String name, @Valid IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @PUT
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration.class),
        @ApiResponse(code = 201, message = "Created", response = IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response replaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus(@PathParam("name") String name, @Valid IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration body, @QueryParam("pretty") String pretty, @QueryParam("dryRun") String dryRun, @QueryParam("fieldManager") String fieldManager);

    @GET
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/watch/flowschemas/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchFlowcontrolApiserverV1alpha1FlowSchema(@PathParam("name") String name, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/watch/flowschemas")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchFlowcontrolApiserverV1alpha1FlowSchemaList(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/watch/prioritylevelconfigurations/{name}")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1",  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration(@PathParam("name") String name, @QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);

    @GET
    @Path("/apis/flowcontrol.apiserver.k8s.io/v1alpha1/watch/prioritylevelconfigurations")
    @Consumes({ "*/*" })
    @Produces({ "application/json", "application/yaml", "application/vnd.kubernetes.protobuf", "application/json;stream=watch", "application/vnd.kubernetes.protobuf;stream=watch" })
    @ApiOperation(value = "", tags={ "flowcontrolApiserver_v1alpha1" })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = IoK8sApimachineryPkgApisMetaV1WatchEvent.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public Response watchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationList(@QueryParam("allowWatchBookmarks") Boolean allowWatchBookmarks, @QueryParam("continue") String _continue, @QueryParam("fieldSelector") String fieldSelector, @QueryParam("labelSelector") String labelSelector, @QueryParam("limit") Integer limit, @QueryParam("pretty") String pretty, @QueryParam("resourceVersion") String resourceVersion, @QueryParam("timeoutSeconds") Integer timeoutSeconds, @QueryParam("watch") Boolean watch);
}

